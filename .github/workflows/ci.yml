name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: 'Build and Push'
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      # - name: Node ${{ matrix.node }} sample
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          # node-version: ${{ matrix.node }}
          node-version: 20
          cache: 'npm'

      - run: npm ci
      - run: npm run test

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: 'arn:aws:iam::356422795669:role/ecr-role'
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-docker-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: rocketseat-ci
          IMAGE_TAG: ${{ steps.generate_tag.outputs.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          IMAGE=$(echo $REGISTRY/$REPOSITORY:$IMAGE_TAG)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Deploy to app runner
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: rocketseat-api
          image: ${{ steps.build-docker-image.outputs.image }}
          access-role-arn: 'arn:aws:iam::356422795669:role/app-runner-role'
          region: us-east-2
          cpu: 1
          memory: 2
          port: 3000
